// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rompi/tax-calc/app/svc (interfaces: DBTrx)

// Package logic is a generated GoMock package.
package logic

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/rompi/tax-calc/app/model"
)

// MockDBTrx is a mock of DBTrx interface
type MockDBTrx struct {
	ctrl     *gomock.Controller
	recorder *MockDBTrxMockRecorder
}

// MockDBTrxMockRecorder is the mock recorder for MockDBTrx
type MockDBTrxMockRecorder struct {
	mock *MockDBTrx
}

// NewMockDBTrx creates a new mock instance
func NewMockDBTrx(ctrl *gomock.Controller) *MockDBTrx {
	mock := &MockDBTrx{ctrl: ctrl}
	mock.recorder = &MockDBTrxMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDBTrx) EXPECT() *MockDBTrxMockRecorder {
	return m.recorder
}

// CreateObject mocks base method
func (m *MockDBTrx) CreateObject(arg0 *model.Object) (*model.Object, error) {
	ret := m.ctrl.Call(m, "CreateObject", arg0)
	ret0, _ := ret[0].(*model.Object)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateObject indicates an expected call of CreateObject
func (mr *MockDBTrxMockRecorder) CreateObject(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateObject", reflect.TypeOf((*MockDBTrx)(nil).CreateObject), arg0)
}

// GetObjects mocks base method
func (m *MockDBTrx) GetObjects() ([]*model.Object, int, error) {
	ret := m.ctrl.Call(m, "GetObjects")
	ret0, _ := ret[0].([]*model.Object)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetObjects indicates an expected call of GetObjects
func (mr *MockDBTrxMockRecorder) GetObjects() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObjects", reflect.TypeOf((*MockDBTrx)(nil).GetObjects))
}
